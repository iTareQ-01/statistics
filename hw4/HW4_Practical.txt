
<!DOCTYPE html>
<html lang="en-US">

<head>
  <meta charset='utf-8'>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="/statistics/assets/css/style.css?v=2338855d07a80ee1e002e9f9dc12344203d0c366">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- start custom head snippets, customize with your own _includes/head-custom.html file -->

  <!-- Setup theme-color -->
  <!-- start theme color meta headers -->
  <meta name="theme-color" content="#151515">
  <meta name="msapplication-navbutton-color" content="#151515">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <!-- end theme color meta headers -->


  <!-- Setup Google Analytics -->



  <!-- You can set your favicon here -->
  <!-- link rel="shortcut icon" type="image/x-icon" href="/statistics/favicon.ico" -->

  <!-- end custom head snippets -->


  <!-- Begin Jekyll SEO tag v2.8.0 -->
  <title>Statistics 2024/2025</title>
  <meta name="generator" content="Jekyll v3.10.0" />
  <meta property="og:title" content="Student Info:" />
  <meta property="og:locale" content="en_US" />
  <meta name="description"
    content="This website contains all the Statistics homework done by me for the year 2024/2025." />
  <meta property="og:description"
    content="This website contains all the Statistics homework done by me for the year 2024/2025." />
  <link rel="canonical" href="https://flaviocanofari.github.io/statistics/" />
  <meta property="og:url" content="https://flaviocanofari.github.io/statistics/" />
  <meta property="og:site_name" content="Statistics 2024/2025" />
  <meta property="og:type" content="website" />
  <meta name="twitter:card" content="summary" />
  <meta property="twitter:title" content="Student Info:" />
  <script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebSite","description":"This website contains all the Statistics homework done by me for the year 2024/2025.","headline":"Student Info:","name":"Statistics 2024/2025","url":"https://flaviocanofari.github.io/statistics/"}</script>
  <!-- End Jekyll SEO tag -->
  <style>
    .highlight {
      color: #d0d0d0
    }

    .highlight table td {
      padding: 5px
    }

    .highlight table pre {
      margin: 0
    }

    .highlight .w {
      color: #d0d0d0
    }

    .highlight .err {
      color: #151515;
      background-color: #ac4142
    }

    .highlight .c,
    .highlight .cd,
    .highlight .cm,
    .highlight .c1,
    .highlight .cs {
      color: #888
    }

    .highlight .cp {
      color: #f4bf75
    }

    .highlight .o,
    .highlight .ow {
      color: #f4bf75
    }

    .highlight .p,
    .highlight .pi {
      color: #d0d0d0
    }

    .highlight .gi {
      color: #90a959
    }

    .highlight .gd {
      color: #ac4142
    }

    .highlight .gh {
      color: #6a9fb5;
      font-weight: bold
    }

    .highlight .k,
    .highlight .kn,
    .highlight .kp,
    .highlight .kr,
    .highlight .kv {
      color: #aa759f
    }

    .highlight .kc,
    .highlight .kt,
    .highlight .kd {
      color: #d28445
    }

    .highlight .s,
    .highlight .sb,
    .highlight .sc,
    .highlight .sd,
    .highlight .s2,
    .highlight .sh,
    .highlight .sx,
    .highlight .s1 {
      color: #90a959
    }

    .highlight .sr {
      color: #75b5aa
    }

    .highlight .si,
    .highlight .se {
      color: #8f5536
    }

    .highlight .nt,
    .highlight .nn,
    .highlight .nc,
    .highlight .no {
      color: #f4bf75
    }

    .highlight .na {
      color: #6a9fb5
    }

    .highlight .m,
    .highlight .mf,
    .highlight .mh,
    .highlight .mi,
    .highlight .il,
    .highlight .mo,
    .highlight .mb,
    .highlight .mx {
      color: #90a959
    }

    .highlight .ss {
      color: #90a959
    }

    body {
      margin: 0;
      padding: 0;
      background: #151515 url("../assets/images/bkg.png") 0 0;
      color: #eaeaea;
      font-size: 16px;
      line-height: 1.5;
      font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal, monospace
    }

    .mine_container {
      width: 90%;
      max-width: 1000px;
      margin: 0 auto
    }

    section {
      display: block;
      margin: 0 0 20px 0
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      margin: 0 0 20px
    }

    li {
      line-height: 1.4
    }

    header {
      background: rgba(0, 0, 0, 0.1);
      width: 100%;
      border-bottom: 1px dashed #b5e853;
      padding: 20px 0;
      margin: 0 0 40px 0
    }

    header h1 {
      font-size: 30px;
      line-height: 1.5;
      margin: -8px 0 0 -40px;
      font-weight: bold;
      font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal, monospace;
      color: #b5e853;
      text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1), 0 0 5px rgba(181, 232, 83, 0.1), 0 0 10px rgba(181, 232, 83, 0.1);
      letter-spacing: -1px;
      -webkit-font-smoothing: antialiased
    }

    @media (max-width: 1000px) {
      header h1 {
        margin-left: 0
      }
    }

    header h1:before {
      content: "./ ";
      font-size: 24px
    }

    header h2 {
      font-size: 18px;
      font-weight: 300;
      color: #666
    }

    #downloads .btn {
      display: inline-block;
      text-align: center;
      margin: 0
    }

    #main_content {
      width: 100%;
      -webkit-font-smoothing: antialiased
    }

    section img {
      max-width: 100%
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-weight: normal;
      font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal, monospace;
      color: #b5e853;
      letter-spacing: -0.03em;
      text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1), 0 0 5px rgba(181, 232, 83, 0.1), 0 0 10px rgba(181, 232, 83, 0.1)
    }

    #main_content h1 {
      font-size: 30px
    }

    #main_content h2 {
      font-size: 24px
    }

    #main_content h3 {
      font-size: 18px
    }

    #main_content h4 {
      font-size: 14px
    }

    #main_content h5 {
      font-size: 12px;
      text-transform: uppercase;
      margin: 0 0 5px 0
    }

    #main_content h6 {
      font-size: 12px;
      text-transform: uppercase;
      color: #999;
      margin: 0 0 5px 0
    }

    dt {
      font-style: italic;
      font-weight: bold
    }

    ul li {
      list-style-image: url("../assets/images/bullet.png")
    }

    blockquote {
      color: #aaa;
      padding-left: 10px;
      border-left: 1px dotted #666
    }

    pre {
      background: rgba(0, 0, 0, 0.9);
      border: 1px solid rgba(255, 255, 255, 0.15);
      padding: 10px;
      font-size: 16px;
      color: #b5e853;
      border-radius: 2px;
      word-wrap: normal;
      overflow: auto;
      overflow-y: hidden
    }

    code.highlighter-rouge {
      background: rgba(0, 0, 0, 0.9);
      border: 1px solid rgba(255, 255, 255, 0.15);
      padding: 0px 3px;
      margin: 0px -3px;
      color: #aa759f;
      border-radius: 2px
    }

    table {
      width: 100%;
      margin: 0 0 20px 0
    }

    th {
      text-align: left;
      border-bottom: 1px dashed #b5e853;
      padding: 5px 10px
    }

    td {
      padding: 5px 10px
    }

    hr {
      height: 0;
      border: 0;
      border-bottom: 1px dashed #b5e853;
      color: #b5e853
    }

    .btn {
      display: inline-block;
      background: -webkit-linear-gradient(top, rgba(130, 130, 130, 0.6), rgba(100, 100, 100, 0.6) 50%, rgba(70, 70, 70, 0.8) 50%, rgba(40, 40, 40, 0.8));
      padding: 8px 18px;
      border-radius: 50px;
      border: 2px solid rgba(0, 0, 0, 0.7);
      border-bottom: 2px solid rgba(0, 0, 0, 0.7);
      border-top: 2px solid #000;
      color: rgba(255, 255, 255, 0.8);
      font-family: Helvetica, Arial, sans-serif;
      font-weight: bold;
      font-size: 18px;
      text-decoration: none;
      text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.75);
      box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.05)
    }

    .btn:hover {
      background: -webkit-linear-gradient(top, rgba(130, 130, 130, 0.6), rgba(100, 100, 100, 0.6) 50%, rgba(70, 70, 70, 0.8) 50%, rgba(40, 40, 40, 0.8));
    }

    .btn .icon {
      display: inline-block;
      width: 16px;
      height: 16px;
      margin: 1px 8px 0 0;
      float: left
    }

    .btn-github .icon {
      opacity: 0.6;
      background: url("../assets/images/blacktocat.png") 0 0 no-repeat
    }

    a {
      color: #63c0f5;
      text-shadow: 0 0 5px rgba(104, 182, 255, 0.5);
      text-decoration: none;
    }

    .cf:before,
    .cf:after {
      content: "";
      display: table
    }

    .cf:after {
      clear: both
    }

    .cf {
      zoom: 1
    }

    #a-title {
      text-decoration: none
    }

    #chartContainer {
      position: relative;
      width: 100%;
      height: 1200px;
      display: none;
    }

    #singleChartOne {
      position: absolute;
      top: 50px;
      left: 10px;
      width: 80%;
    }

    #singleChartTwo {
      position: absolute;
      left: calc(80% - 4px);
      top: 60px;
      width: 15%;
    }

    /* #singleChartThree {
      position: absolute;
      top: 70px;
      width: 15%;
    } */

    #singleChartFour {
      position: absolute;
      bottom: 0px;
      left: 36px;
      width: calc(80% + 21px);
      ;
    }

    canvas {
      width: 100% !important;

    }

    #myChart {
      height: 500px !important;

    }

    #mySecondChart {
      height: 458px !important;

    }

    /* #myThirdChart {
      height: 460px !important;

    } */

    #myFourthChart {
      height: 500px !important;

    }
  </style>

</head>

<body>

  <header>
    <div class="mine_container">
      <ul class="home">
        <li><a href="https://flaviocanofari.github.io/statistics/">HOME</a></li>
      </ul>
      <h1>Homework 4 - Practice</h1>
      <ul>
        <li>In order to see the theory <a href="https://flaviocanofari.github.io/statistics/hw4/hw4_theory.html">click
            here</a></li>
      </ul>
    </div>
  </header>
  <div class="mine_container">
    <section id="main_content">
      <h1>Stochastic Differential Equation simulator refinement</h1>
      <p>
        Refine your stochastic SDE simulator to generate a continuous time, process to represent the scaling limit of
        the random Walk. To create the approximation of time continuity subdivide your reference temporal window into
        vanishing intervals dt and on each infinitesimal interval assign a probability p or p to make a jump of a + or -
        sqrt(dt). Note the significance of the simulation (Donsker invariance principle/ theorem or the functional
        central limit theorem) in relation to the Wiener process.
      </p>
      <h2>Please fill the forms below to generate the chart</h2>

      <form id="valuesForm" class="mb-4">
        <div class="mb-3">
          <label for="integer1" class="form-label">Total Simulation Time (T)</label>
          <input value=25 type="number" class="form-control" id="integer1" placeholder="Please insert an integer"
            required>
        </div>
        <div class="mb-3">
          <label for="integer1.5" class="form-label">Total Number of Intervals (n)</label>
          <input value=100 type="number" class="form-control" id="integer1.5" placeholder="Please insert an integer"
            required>
        </div>

        <div class="mb-3">
          <label for="integer2" class="form-label">Number of Attackers</label>
          <input value=50 type="number" class="form-control" id="integer2" placeholder="Please insert an integer"
            required>
        </div>

        <div class="mb-3">
          <label for="decimal" class="form-label">Probability</label>
          <input value=0.5 type="number" class="form-control" id="decimal" step="0.1" min="0" max="1"
            placeholder="Please insert a decimal greater than 0" required>
        </div>

        <!-- <div class="mb-3">
          <label for="integer3" class="form-label">Intermediate Step</label>
          <input value=25 type="number" class="form-control" id="integer3"
            placeholder="Please insert an integer between 0 and the Total Simulation Time chosen" required>
        </div> -->

        <button type="submit" class="btn btn-primary" style="margin-top: 10px;">Generate</button>
      </form>
    </section>
  </div>
  <div id="chartContainer">
    <div id="singleChartOne">
      <canvas id="myChart"></canvas>
    </div>
    <div id="singleChartTwo">
      <div id="resultContainer" style="margin-top: -92px; margin-left: 30px;">
        <p id="resultMean" style="text-align: left; font-size: 20px;"></p>
        <p id="resultVariance" style="text-align: left; font-size: 20px;"></p>
      </div>
      <canvas id="mySecondChart"></canvas>
    </div>
    <!-- <div id="singleChartThree">
      <canvas id="myThirdChart"></canvas>
      <p id="result2Mean" style="text-align: left; font-size: 20px;margin-top:30px; margin-left: 30px;"></p>
      <p id="result2Variance" style="text-align: left; font-size: 20px; margin-left: 30px;"></p>
    </div> -->
    <div id="singleChartFour">
      <canvas id="myFourthChart"></canvas>
    </div>
  </div>
  <div class="mine_container">
    <section id="main_content">
      <h1>Code Explanation</h1>
      <p>
          Most of the code is the same as the previous homework. Below there are the only few relevant changes in this homework. 
          <br /><br />
      <h2>Data Generation</h2>
      As for the previous homeworks, this function simulates the attack process, with few modifications.<br />
      For each interval, a random value between 0 and 1 is generated using Math.random(). If this value is less than
      the probability p (chosen by the user), the attacker succeeds in penetrating a server (jump
      +\(\sqrt{dt}\)), otherwirse the attacker fails (jump -\(\sqrt{dt}\)). \(dt\) is equal to the Total Time Window/Intervals.<br />
      The results are stored in a ‘dataset’, where each attacker has a line tracking how many servers he has
      penetrated as the attack progresses.<br /><br />
      In the meanwhile also the number of successful jumps done in each step is saved in an array for the absolute
      frequency, and for the relative frequency the latter array is taken and copied to another array by dividing
      each element for the total numebr of attempts done in the step (which is the number of attackers).<br /><br />
      <img src="./code-1.png">
    </section>
  </div>
  <script>
    function adjustMargin() {
      var element = document.querySelector('.home');
      var screenWidth = window.innerWidth;

      if (screenWidth > 1400) {
        element.style.marginLeft = "-20%";
      } else if (screenWidth < 1000) {
        element.style.marginLeft = "0px";
      } else if (screenWidth > 1000 & screenWidth < 1080) {
        element.style.marginLeft = "-40px";
      } else {
        newMargin = -((screenWidth - 1000) / 2);
        element.style.marginLeft = newMargin + "px";
      }
    }
    adjustMargin();
    window.addEventListener('resize', adjustMargin);
  </script>
  <script>
    let myChart = null;
    let mySecondChart = null;
    // let myThirdChart = null;
    let myFourthChart = null;

    function createChart(servers, attackerDatasets) {

      if (myChart !== null) {
        myChart.destroy();
      }

      const ctx = document.getElementById('myChart').getContext('2d');
      myChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: servers,
          datasets: attackerDatasets
        },
        options: {
          maintainAspectRatio: false,
          responsive: true,
          plugins: {
            legend: {
              display: false,
              labels: {
                color: 'white'
              }
            }
          },
          scales: {
            x: {
              display: true,
              title: {
                display: false,
                text: 'servers',
                color: "white",
                font: {
                  size: 18,
                },
              },
              position: 'bottom',
              grid: {
                color: 'grey'
              },
              ticks: {
                color: 'grey'
              }
            },
            y: {
              display: true,
              title: {
                display: false,
                text: 'successful breach',
                color: "white",
                font: {
                  size: 18,
                },
              },
              position: 'left',
              grid: {
                color: 'grey'
              },
              ticks: {
                stepSize: 1,
                color: 'grey'
              }
            },
          }
        }
      });
    }

    // function createSecondChart(servers, penetrationCounts, attackDistribution) {
    //   if (mySecondChart !== null) {
    //     mySecondChart.destroy();
    //   }
    //   const secondCtx = document.getElementById('mySecondChart').getContext('2d');

    //   let newLabel = attackDistribution.slice(1).reverse().map(num => -num).concat(attackDistribution);

    //   mySecondChart = new Chart(secondCtx, {

    //     type: 'bar',
    //     data: {
    //       labels: newLabel,
    //       datasets: [{
    //         label: "Number of attackers for each level",
    //         borderColor: 'yellow',
    //         borderWidth: 2,
    //         radius: 4,
    //         pointBackgroundColor: 'yellow',
    //         backgroundColor: "yellow",
    //         fill: true,
    //         data: penetrationCounts,
    //       }]

    //     },
    //     options: {
    //       maintainAspectRatio: false,
    //       responsive: true,
    //       indexAxis: 'y',
    //       plugins: {
    //         legend: {
    //           display: false,
    //           labels: {
    //             color: 'white'
    //           }
    //         }
    //       },
    //       scales: {
    //         x: {
    //           display: true,
    //           title: {
    //             display: false,
    //             text: 'attackers',
    //             color: "white",
    //             font: {
    //               size: 18,
    //             },
    //           },
    //           position: 'bottom',
    //           grid: {
    //             display: false,
    //             color: 'white'
    //           },
    //           ticks: {
    //             display: false,
    //             color: 'white',
    //             stepSize: 1
    //           }
    //         },
    //         y: {
    //           display: true,
    //           reverse: true,
    //           title: {
    //             display: false,
    //             text: 'successful breach',
    //             color: "white",
    //             font: {
    //               size: 18,
    //             },
    //           },
    //           position: 'left',



    //           grid: {
    //             display: false,
    //             color: 'white'
    //           },
    //           ticks: {
    //             // callback: function (value, index, values) {
    //             //   return '';
    //             // },
    //             color: 'white',
    //           }
    //         }
    //       }

    //     },
    //     maintainAspectRatio: false,
    //   });
    // }

    // function createThirdChart(servers, penetrationCounts) {
    //   if (myThirdChart !== null) {
    //     myThirdChart.destroy();
    //   }

    //   const thirdCtx = document.getElementById('myThirdChart').getContext('2d');

    //   let newLabel = servers;
    //   myThirdChart = new Chart(thirdCtx, {

    //     type: 'bar',
    //     data: {
    //       labels: newLabel,
    //       datasets: [{
    //         label: "Number of attackers for each level",
    //         borderColor: 'yellow',
    //         borderWidth: 2,
    //         radius: 4,
    //         pointBackgroundColor: 'yellow',
    //         backgroundColor: "yellow",
    //         fill: true,
    //         data: penetrationCounts,
    //       }]

    //     },
    //     options: {
    //       maintainAspectRatio: false,
    //       responsive: true,
    //       indexAxis: 'y',
    //       plugins: {
    //         legend: {
    //           display: false,
    //           labels: {
    //             color: 'white'
    //           }
    //         }
    //       },
    //       scales: {
    //         x: {
    //           display: true,
    //           title: {
    //             display: false,
    //             text: 'attackers',
    //             color: "white",
    //             font: {
    //               size: 18,
    //             },
    //           },
    //           position: 'bottom',
    //           grid: {
    //             display: false,
    //             color: 'white'
    //           },
    //           ticks: {
    //             display: false,
    //             color: 'white',
    //             stepSize: 1
    //           }
    //         },
    //         y: {
    //           display: false,
    //           reverse: true,
    //           title: {
    //             display: false,
    //             text: 'successful breach',
    //             color: "white",
    //             font: {
    //               size: 18,
    //             },
    //           },

    //           position: 'left',
    //           grid: {
    //             display: false,
    //             color: 'white'
    //           },
    //           min: 0,
    //           max: servers.length - 1,
    //           ticks: {
    //             callback: function (value, index, values) {
    //               return '';
    //             },
    //             color: 'white',
    //           }
    //         }
    //       }

    //     },
    //     maintainAspectRatio: false, // Keep this false to make the chart responsive
    //   });
    // }

    function createFourthChart(servers, successfulJumps, relativeSuccessfulJumps) {

      if (myFourthChart !== null) {
        myFourthChart.destroy();
      }

      const fourthCtx = document.getElementById('myFourthChart').getContext('2d');
      myFourthChart = new Chart(fourthCtx, {
        type: 'line',
        data: {
          labels: servers,
          datasets: [{
            label: `Absolute frequency`,
            data: successfulJumps,
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 3,
            pointRadius: 2,
            pointHoverRadius: 1,
            tension: 0.4,
          },
          {
            label: `Relative frequency`,
            data: relativeSuccessfulJumps,
            borderColor: 'rgba(255, 150, 100, 1)',
            borderWidth: 3,
            pointRadius: 2,
            pointHoverRadius: 1,
            tension: 0.4,
          }]
        },
        options: {
          maintainAspectRatio: false,
          responsive: true,
          plugins: {
            legend: {
              display: true,
              labels: {
                color: 'white'
              }
            }
          },
          scales: {
            x: {
              display: true,
              position: 'bottom',
              title: {
                display: true,
                text: 'servers',
                color: "white",
                font: {
                  size: 18,
                },
              },
              grid: {
                color: 'grey'
              },
              ticks: {
                color: 'grey'
              }
            },
            y: {
              display: true,
              position: 'right',
              grid: {
                color: 'grey'
              },
              title: {
                display: true,
                text: 'successful jumps',
                color: "white",
                font: {
                  size: 18,
                },
              },
              ticks: {
                stepSize: 1,
                color: 'grey'
              }
            },
          }
        }
      });
    }


    function computeMeanAndVariance(penCount, index = 0, currentMean = 0, M2 = 0) {
      if (index >= penCount.length) {
        const variance = index > 1 ? M2 / (index - 1) : 0;
        return { mean: currentMean, variance: variance };
      }

      const value = penCount[index];

      if (!isNaN(value)) {
        const newIndex = index + 1;
        const delta = value - currentMean;
        const newMean = currentMean + delta / newIndex;

        const delta2 = value - newMean;
        const newM2 = M2 + delta * delta2;

        return computeMeanAndVariance(penCount, newIndex, newMean, newM2);
      }

      return computeMeanAndVariance(penCount, index + 1, currentMean, M2);
    }


    function generateDataset(attackers, intervals, p, dt) {
      let dataset = [];
      let totalSuccessfulJumps = Array(intervals + 1).fill(0);
      const sqrtDt = Math.sqrt(dt);

      for (let i = 1; i <= attackers.length; i++) {
        let attackerData = [];
        attackerData.push(0);
        let max = 0;
        for (let j = 1; j <= intervals; j++) {

          let randomValue = Math.random();

          if (randomValue < p) {
            max = max + sqrtDt;
            totalSuccessfulJumps[j] += 1;
          }
          else {
            max = max - sqrtDt;
          }
          attackerData.push(max);
        }

        dataset.push({
          label: `Attacker ${i}`,
          data: attackerData,
          borderColor: generateRandomHexColor(),
          borderWidth: 2,
          fill: false,
          tension: 0.8,
          pointRadius: 1,
          pointHoverRadius: 1
        });
      }
      const relativeSuccessfulJumps = totalSuccessfulJumps.map((value) => {
        return value / (attackers.length);
      });
      return [dataset, totalSuccessfulJumps, relativeSuccessfulJumps];
    }


    function generateRandomHexColor() {
      let letters = '0123456789ABCDEF';
      let color = '#';
      for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
      }
      return color;
    }

    function getIntermediateDistribution(serversLen, attackerDatasets, step) {
      const penetrationCounts = Array(serversLen * 2 - 1).fill(0);
      let attackerPenetrations = []
      attackerDatasets.forEach((attacker) => {
        const finalPenetrations = attacker.data[step];
        attackerPenetrations.push(finalPenetrations)
        penetrationCounts[finalPenetrations + serversLen - 1]++;
      });
      return [penetrationCounts, attackerPenetrations];
    }


    document.getElementById('valuesForm').addEventListener('submit', function (event) {
      event.preventDefault();
      const integer1 = parseInt(document.getElementById('integer1').value);
      const integer1_5 = parseInt(document.getElementById('integer1.5').value);
      const integer2 = parseInt(document.getElementById('integer2').value);
      const p = parseFloat(document.getElementById('decimal').value);

      if (integer1 < 0 || integer1_5 < integer1) {
        event.preventDefault();
        alert(`Error: The total number of intervals must be greater than the total time window`);
      } else {
        const dt = integer1 / integer1_5;

        // const attackDistribution = [];
        // for (let i = 0; i * Math.sqrt(dt) <= integer1_5 * Math.sqrt(dt); i++) {
        //   attackDistribution.push(i * Math.sqrt(dt));
        // }
        // console.log(attackDistribution)
        const steps = [];
        for (let i = 0; i <= integer1_5; i++) {
          steps.push(i * dt);
        }
        const attackers = [];
        for (let i = 1; i <= integer2; i++) {
          attackers.push(i);
        }
        let [attackerDatasets, successfulJumps, relativeSuccessfulJumps] = generateDataset(attackers, integer1_5, p, dt)
        // let [finalDistribution, finalAttackerPenetrations] = getIntermediateDistribution(steps.length, attackerDatasets, integer1_5);
        // const finalMeanAndVariance = computeMeanAndVariance(finalAttackerPenetrations);
        // const finalAvarage = finalMeanAndVariance.mean ? finalMeanAndVariance.mean.toFixed(2) : 0;
        // const finalVariance = finalMeanAndVariance.variance ? finalMeanAndVariance.variance.toFixed(2) : 0;

        createChart(steps, attackerDatasets, Math.sqrt(dt));
        // createSecondChart(steps, finalDistribution, attackDistribution);
        createFourthChart(steps, successfulJumps, relativeSuccessfulJumps);
        // document.getElementById('resultMean').innerHTML = `Mean: ${finalAvarage}`;
        // document.getElementById('resultVariance').innerHTML = `Variance: ${finalVariance}`;
        document.getElementById('chartContainer').style.display = 'block';
        //   let resultContainer = document.getElementById('resultContainer');
        //   if (resultContainer.offsetHeight === 76) {
        //     resultContainer.style.marginTop = '-92px';
        //   } else if (resultContainer.offsetHeight === 106) {
        //     resultContainer.style.marginTop = '-122px';
        //   } else {
        //     resultContainer.style.marginTop = '-152px';
        //   }
      }
    });
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.1.2/es5/tex-mml-chtml.js">
  </script>
</body>

</html>