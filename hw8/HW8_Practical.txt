<!DOCTYPE html>
<html lang="en-US">

<head>
  <meta charset='utf-8'>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="/statistics/assets/css/style.css?v=2338855d07a80ee1e002e9f9dc12344203d0c366">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- start custom head snippets, customize with your own _includes/head-custom.html file -->

  <!-- Setup theme-color -->
  <!-- start theme color meta headers -->
  <meta name="theme-color" content="#151515">
  <meta name="msapplication-navbutton-color" content="#151515">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <!-- end theme color meta headers -->


  <!-- Setup Google Analytics -->



  <!-- You can set your favicon here -->
  <!-- link rel="shortcut icon" type="image/x-icon" href="/statistics/favicon.ico" -->

  <!-- end custom head snippets -->


  <!-- Begin Jekyll SEO tag v2.8.0 -->
  <title>Statistics 2024/2025</title>
  <meta name="generator" content="Jekyll v3.10.0" />
  <meta property="og:title" content="Student Info:" />
  <meta property="og:locale" content="en_US" />
  <meta name="description"
    content="This website contains all the Statistics homework done by me for the year 2024/2025." />
  <meta property="og:description"
    content="This website contains all the Statistics homework done by me for the year 2024/2025." />
  <link rel="canonical" href="https://flaviocanofari.github.io/statistics/" />
  <meta property="og:url" content="https://flaviocanofari.github.io/statistics/" />
  <meta property="og:site_name" content="Statistics 2024/2025" />
  <meta property="og:type" content="website" />
  <meta name="twitter:card" content="summary" />
  <meta property="twitter:title" content="Student Info:" />
  <script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebSite","description":"This website contains all the Statistics homework done by me for the year 2024/2025.","headline":"Student Info:","name":"Statistics 2024/2025","url":"https://flaviocanofari.github.io/statistics/"}</script>
  <!-- End Jekyll SEO tag -->
  <style>
    .highlight {
      color: #d0d0d0
    }

    .highlight table td {
      padding: 5px
    }

    .highlight table pre {
      margin: 0
    }

    .highlight .w {
      color: #d0d0d0
    }

    .highlight .err {
      color: #151515;
      background-color: #ac4142
    }

    .highlight .c,
    .highlight .cd,
    .highlight .cm,
    .highlight .c1,
    .highlight .cs {
      color: #888
    }

    .highlight .cp {
      color: #f4bf75
    }

    .highlight .o,
    .highlight .ow {
      color: #f4bf75
    }

    .highlight .p,
    .highlight .pi {
      color: #d0d0d0
    }

    .highlight .gi {
      color: #90a959
    }

    .highlight .gd {
      color: #ac4142
    }

    .highlight .gh {
      color: #6a9fb5;
      font-weight: bold
    }

    .highlight .k,
    .highlight .kn,
    .highlight .kp,
    .highlight .kr,
    .highlight .kv {
      color: #aa759f
    }

    .highlight .kc,
    .highlight .kt,
    .highlight .kd {
      color: #d28445
    }

    .highlight .s,
    .highlight .sb,
    .highlight .sc,
    .highlight .sd,
    .highlight .s2,
    .highlight .sh,
    .highlight .sx,
    .highlight .s1 {
      color: #90a959
    }

    .highlight .sr {
      color: #75b5aa
    }

    .highlight .si,
    .highlight .se {
      color: #8f5536
    }

    .highlight .nt,
    .highlight .nn,
    .highlight .nc,
    .highlight .no {
      color: #f4bf75
    }

    .highlight .na {
      color: #6a9fb5
    }

    .highlight .m,
    .highlight .mf,
    .highlight .mh,
    .highlight .mi,
    .highlight .il,
    .highlight .mo,
    .highlight .mb,
    .highlight .mx {
      color: #90a959
    }

    .highlight .ss {
      color: #90a959
    }

    body {
      margin: 0;
      padding: 0;
      background: #151515 url("../assets/images/bkg.png") 0 0;
      color: #eaeaea;
      font-size: 16px;
      line-height: 1.5;
      font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal, monospace
    }

    .mine_container {
      width: 90%;
      max-width: 1000px;
      margin: 0 auto
    }

    section {
      display: block;
      margin: 0 0 20px 0
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      margin: 0 0 20px
    }

    li {
      line-height: 1.4
    }

    header {
      background: rgba(0, 0, 0, 0.1);
      width: 100%;
      border-bottom: 1px dashed #b5e853;
      padding: 20px 0;
      margin: 0 0 40px 0
    }

    header h1 {
      font-size: 30px;
      line-height: 1.5;
      margin: -8px 0 0 -40px;
      font-weight: bold;
      font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal, monospace;
      color: #b5e853;
      text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1), 0 0 5px rgba(181, 232, 83, 0.1), 0 0 10px rgba(181, 232, 83, 0.1);
      letter-spacing: -1px;
      -webkit-font-smoothing: antialiased
    }

    @media (max-width: 1000px) {
      header h1 {
        margin-left: 0
      }
    }

    header h1:before {
      content: "./ ";
      font-size: 24px
    }

    header h2 {
      font-size: 18px;
      font-weight: 300;
      color: #666
    }

    #downloads .btn {
      display: inline-block;
      text-align: center;
      margin: 0
    }

    #main_content {
      width: 100%;
      -webkit-font-smoothing: antialiased
    }

    section img {
      max-width: 100%
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-weight: normal;
      font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal, monospace;
      color: #b5e853;
      letter-spacing: -0.03em;
      text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1), 0 0 5px rgba(181, 232, 83, 0.1), 0 0 10px rgba(181, 232, 83, 0.1)
    }

    #main_content h1 {
      font-size: 30px
    }

    #main_content h2 {
      font-size: 24px
    }

    #main_content h3 {
      font-size: 18px
    }

    #main_content h4 {
      font-size: 14px
    }

    #main_content h5 {
      font-size: 12px;
      text-transform: uppercase;
      margin: 0 0 5px 0
    }

    #main_content h6 {
      font-size: 12px;
      text-transform: uppercase;
      color: #999;
      margin: 0 0 5px 0
    }

    dt {
      font-style: italic;
      font-weight: bold
    }

    ul li {
      list-style-image: url("../assets/images/bullet.png")
    }

    blockquote {
      color: #aaa;
      padding-left: 10px;
      border-left: 1px dotted #666
    }

    pre {
      background: rgba(0, 0, 0, 0.9);
      border: 1px solid rgba(255, 255, 255, 0.15);
      padding: 10px;
      font-size: 16px;
      color: #b5e853;
      border-radius: 2px;
      word-wrap: normal;
      overflow: auto;
      overflow-y: hidden
    }

    code.highlighter-rouge {
      background: rgba(0, 0, 0, 0.9);
      border: 1px solid rgba(255, 255, 255, 0.15);
      padding: 0px 3px;
      margin: 0px -3px;
      color: #aa759f;
      border-radius: 2px
    }

    table {
      width: 100%;
      margin: 0 0 20px 0
    }

    th {
      text-align: left;
      border-bottom: 1px dashed #b5e853;
      padding: 5px 10px
    }

    td {
      padding: 5px 10px
    }

    hr {
      height: 0;
      border: 0;
      border-bottom: 1px dashed #b5e853;
      color: #b5e853
    }

    .btn {
      display: inline-block;
      background: -webkit-linear-gradient(top, rgba(130, 130, 130, 0.6), rgba(100, 100, 100, 0.6) 50%, rgba(70, 70, 70, 0.8) 50%, rgba(40, 40, 40, 0.8));
      padding: 8px 18px;
      border-radius: 50px;
      border: 2px solid rgba(0, 0, 0, 0.7);
      border-bottom: 2px solid rgba(0, 0, 0, 0.7);
      border-top: 2px solid #000;
      color: rgba(255, 255, 255, 0.8);
      font-family: Helvetica, Arial, sans-serif;
      font-weight: bold;
      font-size: 18px;
      text-decoration: none;
      text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.75);
      box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.05)
    }

    .btn:hover {
      background: -webkit-linear-gradient(top, rgba(130, 130, 130, 0.6), rgba(100, 100, 100, 0.6) 50%, rgba(70, 70, 70, 0.8) 50%, rgba(40, 40, 40, 0.8));
    }

    .btn .icon {
      display: inline-block;
      width: 16px;
      height: 16px;
      margin: 1px 8px 0 0;
      float: left
    }

    .btn-github .icon {
      opacity: 0.6;
      background: url("../assets/images/blacktocat.png") 0 0 no-repeat
    }

    a {
      color: #63c0f5;
      text-shadow: 0 0 5px rgba(104, 182, 255, 0.5);
      text-decoration: none;
    }

    .cf:before,
    .cf:after {
      content: "";
      display: table
    }

    .cf:after {
      clear: both
    }

    .cf {
      zoom: 1
    }

    #a-title {
      text-decoration: none
    }
  </style>

</head>

<body>

  <header>
    <div class="mine_container">
      <ul class="home">
        <li><a href="https://flaviocanofari.github.io/statistics/">HOME</a></li>
      </ul>
      <h1>Homework 8 - Practice</h1>
      <ul>
        <li>In order to see the theory <a href="https://flaviocanofari.github.io/statistics/hw8/hw8_theory.html">click
            here</a></li>
      </ul>
    </div>
  </header>
  <div class="mine_container">
    <section id="main_content">

      <h1>Caesar Cipher and Frequency Analysis</h1>

      <h2>Input Text</h2>
      <textarea id="inputText" style="width: 100%;" rows="10"
        placeholder="Enter your text here...">But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure? On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee </textarea>
      <br><br>
      <h2>Encrypt the Text</h2>
      <label for="shift">Enter shift value (1-25):</label>
      <input value="16" type="number" id="shift" min="1" max="25">
      <button onclick="encryptText()">Encrypt Text</button>
      <div class="output" id="encryptedOutput"></div>
      <br>
      <h2>Frequency Analysis Decryption</h2>
      <button onclick="decryptWithFrequency()">Decrypt Using Frequency Analysis</button>
      <div class="output" id="decryptedOutput"></div>


      <hr>
      <h1>Modular Exponentiation Encryption</h1>
      <h2>Input Text</h2>
      <textarea id="modularText" style="width: 100%;" rows="10"
        placeholder="Enter your text here...">But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure? On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee </textarea>
      <br><br>
      <h2>Encrypt the Text</h2>
      <label for="exponent">Enter Exponent (k):</label>
      <input type="number" id="exponent" min="1" value="3">
      <br>
      <label for="modulus">Enter Prime Modulus (P):</label>
      <input type="number" id="modulus" min="27" value="37">

      <button onclick="encryptTextModular()">Encrypt (Modular)</button>

      <br><br>
      <div class="output">
        <div id="encryptedOutputModular" style="word-wrap: break-word;"></div>
      </div>

    </section>
  </div>
  <div class="mine_container">
    <section id="main_content">
      <h1>Research</h1>
      <h2>Cryptographic Analysis: Caesar Cipher vs RSA</h2>
      <p>
        Frequency analysis is a statistical technique used to break simple substitution ciphers like the Caesar cipher.
        In this cipher, each letter in the plaintext is shifted by a constant value, making it relatively easy to
        decrypt if the shift value is known or can be deduced.
        The key to cracking the Caesar cipher lies in the fact that certain letters appear with a predictable frequency
        in natural language.
        For example, in English, the letter 'E' appears most often, followed by 'T', 'A', 'O', and others. A simple
        analysis of letter frequencies can help identify the
        shift key used for encryption.
      </p>

      <p>
        In contrast, breaking RSA encryption without knowledge of the private key or access to critical information is
        computationally infeasible.
        RSA relies on the mathematical difficulty of factoring large prime numbers. While the encryption process uses
        the public key (composed of two prime numbers),
        decrypting the message requires the private key, which is derived from those prime numbers. The security of RSA
        comes from the fact that,
        as the size of the prime numbers increases, factoring the product becomes extremely time-consuming and
        practically impossible with current computational methods.
      </p>

      <h2>Visualizing Distributions and Shannon Entropy</h2>
      <p>
        A key aspect of cryptographic analysis is understanding how the statistical properties of encrypted messages
        relate to the strength of the encryption method.
        In the Caesar cipher, we expect a noticeable pattern in the frequency distribution of letters, whereas in RSA
        encryption, the distribution is much more random.
      </p>

      <h3>Shannon Entropy of Caesar Cipher</h3>
      <p>
        The Shannon entropy for a distribution measures the amount of uncertainty or unpredictability.
        In the case of the Caesar cipher, due to its simple shift mechanism, the entropy is relatively low because the
        frequency of letters can still be predicted.
        For example, if we were to perform frequency analysis on a Caesar cipher text, we would likely see patterns in
        letter frequency, such as 'E' being the most common letter.
        Thus, the entropy is lower because the distribution of characters is less random.
      </p>

      <h3>Shannon Entropy of RSA</h3>
      <p>
        On the other hand, RSA encryption produces a much higher entropy in its encrypted output. The ciphertext is
        highly randomized and exhibits no noticeable patterns.
        Even if an attacker were to analyze the ciphertext, without the private key, there is no way to predict the
        original message.
        This results in a higher entropy value, signifying greater unpredictability and security.
      </p>

      <h2>Summary and Findings</h2>
      <p>
        While the Caesar cipher is vulnerable to frequency analysis due to its simplistic approach, where the
        patterns in letter frequency can be easily exploited, on the other hand RSA encryption provides much stronger
        security due to its reliance on number-theoretic problems, such
        as factoring large prime numbers, which is computationally infeasible for modern systems.
        The Shannon entropy calculations reveal that the Caesar cipher has lower entropy and thus lower security, while
        RSA encryption has higher entropy, making it more secure.
      </p>

      <h1>Code Explanation</h1>

      <section>
        <h2>Letter Frequency in English</h2>
        <p>
          The <code>englishFrequencies</code> variable represents the percentage distribution of letters in the English
          language.
          It is used as a reference to compare with the encrypted text and detect the probable shift key.
        </p>
        <img src="./code-1.png">
      </section>

      <section>
        <h2>Calculating Letter Frequencies</h2>
        <p>
          The <code>calculateFrequency</code> function computes the frequency of each letter in a given text.
          It considers only alphabetic characters, ignoring special characters and numbers. The frequencies
          are normalized to percentages.
        </p>
        <img src="./code-2.png">
      </section>

      <section>
        <h2>Encrypting the Text</h2>
        <p>
          The <code>caesarCipherEncrypt</code> function applies the Caesar cipher to the given text.
          Each letter is shifted by a value specified by the <code>shift</code> parameter.
          The function properly handles both uppercase and lowercase letters.
        </p>
        <img src="./code-3.png">
      </section>

      <section>
        <h2>Decrypting the Text</h2>
        <p>
          The <code>caesarCipherDecrypt</code> function decrypts the encrypted text by reversing the encryption process.
          Decryption is equivalent to encrypting with a shift of <code>(26 - shift)</code>.
        </p>
        <img src="./code-4.png">
      </section>

      <section>
        <h2>Detecting the Shift Key</h2>
        <p>
          The <code>detectShiftKey</code> function uses frequency analysis to determine the shift key used in
          encryption.
          It compares the encrypted text's frequency distribution to the English letter frequency distribution
          for all possible shifts. The function returns the shift key with the smallest difference.
        </p>
        <img src="./code-5.png">
      </section>

      <section>
        <h2>User Interaction</h2>
        <p>
          The <code>encryptText</code> and <code>decryptWithFrequency</code> functions handle user interaction.
          The first encrypts the input text with a specified shift value. The second decrypts the encrypted text using
          frequency analysis to determine the most likely shift value.
        </p>
        <img src="./code-6.png">
      </section>

    </section>
  </div>
  <script>
    function adjustMargin() {
      var element = document.querySelector('.home');
      var screenWidth = window.innerWidth;

      if (screenWidth > 1400) {
        element.style.marginLeft = "-20%";
      } else if (screenWidth < 1000) {
        element.style.marginLeft = "0px";
      } else if (screenWidth > 1000 & screenWidth < 1080) {
        element.style.marginLeft = "-40px";
      } else {
        newMargin = -((screenWidth - 1000) / 2);
        element.style.marginLeft = newMargin + "px";
      }
    }
    adjustMargin();
    window.addEventListener('resize', adjustMargin);
  </script>
  <script>
    const englishFrequencies = [
      8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
      0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056,
      2.758, 0.978, 2.360, 0.150, 1.974, 0.074
    ];

    function calculateFrequency(text) {
      const freq = Array(26).fill(0);
      const letters = text.replace(/[^a-z]/gi, '').toLowerCase();
      for (let char of letters) {
        freq[char.charCodeAt(0) - 97]++;
      }
      const total = letters.length;
      return freq.map(f => (f / total) * 100);
    }


    function caesarCipherEncrypt(text, shift) {
      return text.replace(/[a-z]/gi, (char) => {
        const base = char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90 ? 65 : 97;
        return String.fromCharCode(((char.charCodeAt(0) - base + shift) % 26) + base);
      });
    }


    function caesarCipherDecrypt(text, shift) {
      return caesarCipherEncrypt(text, 26 - shift);
    }


    function detectShiftKey(encryptedText) {
      const encryptedFreq = calculateFrequency(encryptedText);
      const candidates = [];

      for (let shift = 0; shift < 26; shift++) {
        const rotatedFreq = encryptedFreq.map((_, i) => encryptedFreq[(i + shift) % 26]);
        const difference = rotatedFreq.reduce((sum, f, i) => sum + Math.abs(f - englishFrequencies[i]), 0);
        candidates.push({ shift, difference });
      }
      candidates.sort((a, b) => a.difference - b.difference);
      return candidates[0];
    }


    function encryptText() {
      const text = document.getElementById("inputText").value;
      const shift = parseInt(document.getElementById("shift").value, 10);
      if (!text || isNaN(shift) || shift < 1 || shift > 25) {
        alert("Please provide valid text and a shift value between 1 and 25.");
        return;
      }
      const encrypted = caesarCipherEncrypt(text, shift);
      document.getElementById("encryptedOutput").innerHTML = `<br>${encrypted}`;
    }

    function decryptWithFrequency() {
      const encryptedText = document.getElementById("encryptedOutput").innerText;
      if (!encryptedText) {
        alert("Please encrypt a text first.");
        return;
      }
      const shiftCandidate = detectShiftKey(encryptedText);
      const decrypted = caesarCipherDecrypt(encryptedText, shiftCandidate.shift);
      document.getElementById("decryptedOutput").innerHTML = `
        <br><strong>Stronger Decryption Proposal:</strong><br><br>${decrypted}
        `;
    }

    function letterToNumber(char) {
      return char.toUpperCase().charCodeAt(0) - 65;
    }

    function numberToLetter(num) {
      return String.fromCharCode((num % 26) + 65);
    }

    function modExp(base, exp, mod) {
      let result = 1;
      base = base % mod;
      while (exp > 0) {
        if (exp % 2 === 1) {
          result = (result * base) % mod;
        }
        exp = Math.floor(exp / 2);
        base = (base * base) % mod;
      }
      return result;
    }

    function encryptModular(text, exponent, modulus) {
      const cleanText = text.replace(/[^a-zA-Z]/g, '').toUpperCase();
      return cleanText
        .split('')
        .map(char => {
          const num = letterToNumber(char);
          const encoded = modExp(num, exponent, modulus);
          return numberToLetter(encoded);
        })
        .join('');
    }

    function encryptTextModular() {
      const text = document.getElementById("modularText").value;
      const exponent = parseInt(document.getElementById("exponent").value, 10);
      const modulus = parseInt(document.getElementById("modulus").value, 10);

      if (!text || isNaN(exponent) || isNaN(modulus)) {
        alert("Please enter valid text, exponent, and modulus values.");
        return;
      }

      const encrypted = encryptModular(text, exponent, modulus);
      document.getElementById("encryptedOutputModular").innerText = encrypted;
    }
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.1.2/es5/tex-mml-chtml.js">
  </script>

</body>

</html>