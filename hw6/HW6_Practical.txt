<!DOCTYPE html>
<html lang="en-US">

<head>
  <meta charset='utf-8'>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="/statistics/assets/css/style.css?v=2338855d07a80ee1e002e9f9dc12344203d0c366">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- start custom head snippets, customize with your own _includes/head-custom.html file -->

  <!-- Setup theme-color -->
  <!-- start theme color meta headers -->
  <meta name="theme-color" content="#151515">
  <meta name="msapplication-navbutton-color" content="#151515">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <!-- end theme color meta headers -->


  <!-- Setup Google Analytics -->



  <!-- You can set your favicon here -->
  <!-- link rel="shortcut icon" type="image/x-icon" href="/statistics/favicon.ico" -->

  <!-- end custom head snippets -->


  <!-- Begin Jekyll SEO tag v2.8.0 -->
  <title>Statistics 2024/2025</title>
  <meta name="generator" content="Jekyll v3.10.0" />
  <meta property="og:title" content="Student Info:" />
  <meta property="og:locale" content="en_US" />
  <meta name="description"
    content="This website contains all the Statistics homework done by me for the year 2024/2025." />
  <meta property="og:description"
    content="This website contains all the Statistics homework done by me for the year 2024/2025." />
  <link rel="canonical" href="https://flaviocanofari.github.io/statistics/" />
  <meta property="og:url" content="https://flaviocanofari.github.io/statistics/" />
  <meta property="og:site_name" content="Statistics 2024/2025" />
  <meta property="og:type" content="website" />
  <meta name="twitter:card" content="summary" />
  <meta property="twitter:title" content="Student Info:" />
  <script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebSite","description":"This website contains all the Statistics homework done by me for the year 2024/2025.","headline":"Student Info:","name":"Statistics 2024/2025","url":"https://flaviocanofari.github.io/statistics/"}</script>
  <!-- End Jekyll SEO tag -->
  <style>
    .highlight {
      color: #d0d0d0
    }

    .highlight table td {
      padding: 5px
    }

    .highlight table pre {
      margin: 0
    }

    .highlight .w {
      color: #d0d0d0
    }

    .highlight .err {
      color: #151515;
      background-color: #ac4142
    }

    .highlight .c,
    .highlight .cd,
    .highlight .cm,
    .highlight .c1,
    .highlight .cs {
      color: #888
    }

    .highlight .cp {
      color: #f4bf75
    }

    .highlight .o,
    .highlight .ow {
      color: #f4bf75
    }

    .highlight .p,
    .highlight .pi {
      color: #d0d0d0
    }

    .highlight .gi {
      color: #90a959
    }

    .highlight .gd {
      color: #ac4142
    }

    .highlight .gh {
      color: #6a9fb5;
      font-weight: bold
    }

    .highlight .k,
    .highlight .kn,
    .highlight .kp,
    .highlight .kr,
    .highlight .kv {
      color: #aa759f
    }

    .highlight .kc,
    .highlight .kt,
    .highlight .kd {
      color: #d28445
    }

    .highlight .s,
    .highlight .sb,
    .highlight .sc,
    .highlight .sd,
    .highlight .s2,
    .highlight .sh,
    .highlight .sx,
    .highlight .s1 {
      color: #90a959
    }

    .highlight .sr {
      color: #75b5aa
    }

    .highlight .si,
    .highlight .se {
      color: #8f5536
    }

    .highlight .nt,
    .highlight .nn,
    .highlight .nc,
    .highlight .no {
      color: #f4bf75
    }

    .highlight .na {
      color: #6a9fb5
    }

    .highlight .m,
    .highlight .mf,
    .highlight .mh,
    .highlight .mi,
    .highlight .il,
    .highlight .mo,
    .highlight .mb,
    .highlight .mx {
      color: #90a959
    }

    .highlight .ss {
      color: #90a959
    }

    body {
      margin: 0;
      padding: 0;
      background: #151515 url("../assets/images/bkg.png") 0 0;
      color: #eaeaea;
      font-size: 16px;
      line-height: 1.5;
      font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal, monospace
    }

    .mine_container {
      width: 90%;
      max-width: 1000px;
      margin: 0 auto
    }

    section {
      display: block;
      margin: 0 0 20px 0
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      margin: 0 0 20px
    }

    li {
      line-height: 1.4
    }

    header {
      background: rgba(0, 0, 0, 0.1);
      width: 100%;
      border-bottom: 1px dashed #b5e853;
      padding: 20px 0;
      margin: 0 0 40px 0
    }

    header h1 {
      font-size: 30px;
      line-height: 1.5;
      margin: -8px 0 0 -40px;
      font-weight: bold;
      font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal, monospace;
      color: #b5e853;
      text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1), 0 0 5px rgba(181, 232, 83, 0.1), 0 0 10px rgba(181, 232, 83, 0.1);
      letter-spacing: -1px;
      -webkit-font-smoothing: antialiased
    }

    @media (max-width: 1000px) {
      header h1 {
        margin-left: 0
      }
    }

    header h1:before {
      content: "./ ";
      font-size: 24px
    }

    header h2 {
      font-size: 18px;
      font-weight: 300;
      color: #666
    }

    #downloads .btn {
      display: inline-block;
      text-align: center;
      margin: 0
    }

    #main_content {
      width: 100%;
      -webkit-font-smoothing: antialiased
    }

    section img {
      max-width: 100%
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-weight: normal;
      font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal, monospace;
      color: #b5e853;
      letter-spacing: -0.03em;
      text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1), 0 0 5px rgba(181, 232, 83, 0.1), 0 0 10px rgba(181, 232, 83, 0.1)
    }

    #main_content h1 {
      font-size: 30px
    }

    #main_content h2 {
      font-size: 24px
    }

    #main_content h3 {
      font-size: 18px
    }

    #main_content h4 {
      font-size: 14px
    }

    #main_content h5 {
      font-size: 12px;
      text-transform: uppercase;
      margin: 0 0 5px 0
    }

    #main_content h6 {
      font-size: 12px;
      text-transform: uppercase;
      color: #999;
      margin: 0 0 5px 0
    }

    dt {
      font-style: italic;
      font-weight: bold
    }

    ul li {
      list-style-image: url("../assets/images/bullet.png")
    }

    blockquote {
      color: #aaa;
      padding-left: 10px;
      border-left: 1px dotted #666
    }

    pre {
      background: rgba(0, 0, 0, 0.9);
      border: 1px solid rgba(255, 255, 255, 0.15);
      padding: 10px;
      font-size: 16px;
      color: #b5e853;
      border-radius: 2px;
      word-wrap: normal;
      overflow: auto;
      overflow-y: hidden
    }

    code.highlighter-rouge {
      background: rgba(0, 0, 0, 0.9);
      border: 1px solid rgba(255, 255, 255, 0.15);
      padding: 0px 3px;
      margin: 0px -3px;
      color: #aa759f;
      border-radius: 2px
    }

    table {
      width: 100%;
      margin: 0 0 20px 0
    }

    th {
      text-align: left;
      border-bottom: 1px dashed #b5e853;
      padding: 5px 10px
    }

    td {
      padding: 5px 10px
    }

    hr {
      height: 0;
      border: 0;
      border-bottom: 1px dashed #b5e853;
      color: #b5e853
    }

    .btn {
      display: inline-block;
      background: -webkit-linear-gradient(top, rgba(130, 130, 130, 0.6), rgba(100, 100, 100, 0.6) 50%, rgba(70, 70, 70, 0.8) 50%, rgba(40, 40, 40, 0.8));
      padding: 8px 18px;
      border-radius: 50px;
      border: 2px solid rgba(0, 0, 0, 0.7);
      border-bottom: 2px solid rgba(0, 0, 0, 0.7);
      border-top: 2px solid #000;
      color: rgba(255, 255, 255, 0.8);
      font-family: Helvetica, Arial, sans-serif;
      font-weight: bold;
      font-size: 18px;
      text-decoration: none;
      text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.75);
      box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.05)
    }

    .btn:hover {
      background: -webkit-linear-gradient(top, rgba(130, 130, 130, 0.6), rgba(100, 100, 100, 0.6) 50%, rgba(70, 70, 70, 0.8) 50%, rgba(40, 40, 40, 0.8));
    }

    .btn .icon {
      display: inline-block;
      width: 16px;
      height: 16px;
      margin: 1px 8px 0 0;
      float: left
    }

    .btn-github .icon {
      opacity: 0.6;
      background: url("../assets/images/blacktocat.png") 0 0 no-repeat
    }

    a {
      color: #63c0f5;
      text-shadow: 0 0 5px rgba(104, 182, 255, 0.5);
      text-decoration: none;
    }

    .cf:before,
    .cf:after {
      content: "";
      display: table
    }

    .cf:after {
      clear: both
    }

    .cf {
      zoom: 1
    }

    #a-title {
      text-decoration: none
    }
  </style>

</head>

<body>

  <header>
    <div class="mine_container">
      <ul class="home">
        <li><a href="https://flaviocanofari.github.io/statistics/">HOME</a></li>
      </ul>
      <h1>Homework 6 - Practice</h1>
      <ul>
        <li>In order to see the theory <a href="https://flaviocanofari.github.io/statistics/hw6/hw6_theory.html">click
            here</a></li>
      </ul>
    </div>
  </header>
  <div class="mine_container">
    <section id="main_content">
      <h2>Convergence of the empirical distribution to the theoretical distribution</h2>

      <div class="input-section">
        <label for="numFields">Enter number of fields (2-10): </label>
        <input type="number" value="5" id="numFields" min="2" max="10" step="1">
        <button type="submit" class="btn btn-primary" onclick="createFields()">Create Fields</button>

        <div id="inputContainer"></div>
        <br />
        <button id="randomizeButton" class="btn btn-secondary" onclick="randomizeFields()"
          style="display: none;">Randomize Fields</button>
        <br /><br />
        <p id="sumStatus">Sum: 0.00</p>
        <label>Samples:</label>
        <input type="number" style="width: 10%;" id="sampleIntervals" min="1" max="100000" value="10000">
        <br><br>
        <button id="generateGraphButton" type="submit" class="btn btn-primary" disabled="true"
          onclick="generateHistogram()">Generate</button>
      </div>

    </section>
  </div>
  <canvas id="histogramCanvas" style="display: none;" height="400"></canvas>

  <div class="mine_container">
    <section id="main_content">
      <b>
        <p id="resultMean" style="text-align: center; font-size: 20px;"></p>
      </b>
      <b>
        <p id="resultVariance" style="text-align: center; font-size: 20px;"></p>
      </b>
      <h1>Mean and Variance Analysis</h1>
      <p>As can be seen, the empirical mean and variance for large samples tend to be very close to the theoretical ones because of the law of large numbers, on the other hand, as the samples decrease, the difference between empirical and theoretical tends to grow.
      </p>
      <h1>Code Explanation</h1>
      <h2>Generating Chart</h2>
      <p>The generateHistorigram() function is responsible for collecting the input in order to draw the
        distribution historigram. In fact it simply generate a random number for each interval specified by the user and
        assign it to an outcome based on it's probability. Every 100 interval it draws the graph in order to give it an
        animation</p>
      <img src="./code-1.png">
      <br /><br />
      <h2>
        Drawing the Chart
      </h2>
      <p>
        the drawHistorigram() function simply takes the as input the dataset generated by the previous function and uses
        javascript canvas in order to draw rectangles. It also compure mean and variance and display the results.
      </p>
      <img src="./code-2.png">
      <h2>Computing Mean and Variance</h2>
      <p>
        As for the previous homework, this function calculates the mean and variance using recursion.
        The idea is to gradually add up the values while accounting for their associated probabilities, updating the
        mean step by step using the following formula:
        \[
        \mu_n = \mu_{n-1} + p_n \cdot (x_n - \mu_{n-1})
        \]
        where \(p_n\) is the probability associated with \(x_n\).
        The variance is updated in a similar way, using the formula:
        \[
        M_n = M_{n-1} + p_n \cdot (x_n - \mu_n)(x_n - \mu_{n-1})
        \]
        where \(M_n\) accumulates the weighted contribution to the variance.<br /><br />
        <img src="./code-3.png">
      </p>
      <br /><br />
    </section>
  </div>
  <script>
    function adjustMargin() {
      var element = document.querySelector('.home');
      var screenWidth = window.innerWidth;

      if (screenWidth > 1400) {
        element.style.marginLeft = "-20%";
      } else if (screenWidth < 1000) {
        element.style.marginLeft = "0px";
      } else if (screenWidth > 1000 & screenWidth < 1080) {
        element.style.marginLeft = "-40px";
      } else {
        newMargin = -((screenWidth - 1000) / 2);
        element.style.marginLeft = newMargin + "px";
      }
    }
    adjustMargin();
    window.addEventListener('resize', adjustMargin);
  </script>
  <script>
    function computeWeightedMeanAndVariance(values, probabilities, index = 0, currentMean = 0, M2 = 0) {
      if (index >= values.length) {
        const variance = M2;
        return { mean: currentMean, variance: variance };
      }
      const value = values[index];
      const prob = probabilities[index];

      const delta = value - currentMean;
      const newMean = currentMean + prob * delta;
      const delta2 = value - newMean;
      const newM2 = M2 + prob * delta * delta2;

      return computeWeightedMeanAndVariance(values, probabilities, index + 1, newMean, newM2);
    }

    function createFields() {
      const numFields = document.getElementById('numFields').value;

      if (numFields < 2 || numFields > 10) {
        alert("Please enter a number between 2 and 10.");
        return;
      }

      const container = document.getElementById('inputContainer');
      container.innerHTML = "";
      document.getElementById('sumStatus').innerText = "Sum: 0.00";
      document.getElementById('generateGraphButton').disabled = true;
      document.getElementById('randomizeButton').style.display = 'inline';

      for (let i = 0; i < numFields; i++) {
        const input = document.createElement("input");
        input.type = "number";
        input.step = "0.01";
        input.min = "0";
        input.max = "100";
        input.style.width = "20%"
        input.placeholder = `Probability ${i + 1}`;
        input.oninput = validateSum;

        container.appendChild(input);
        container.appendChild(document.createElement("br"));
      }
    }

    function randomizeFields() {
      const inputs = document.querySelectorAll("#inputContainer input");
      const numFields = inputs.length;
      const randomValues = generateRandomProbabilities(numFields);

      inputs.forEach((input, index) => {
        input.value = randomValues[index].toFixed(2);
      });

      validateSum();
    }

    function generateRandomProbabilities(numFields) {

      let values = Array(numFields).fill(0).map(() => Math.random());
      const sum = values.reduce((acc, val) => acc + val, 0);
      values = values.map(val => val / sum);

      values = values.map(val => parseFloat(val.toFixed(2)));

      const roundedSum = values.reduce((acc, val) => acc + val, 0);
      const difference = 1 - roundedSum;
      values[values.length - 1] += parseFloat(difference.toFixed(4));

      return values;
    }

    function validateSum() {
      const inputs = document.querySelectorAll("#inputContainer input");
      let sum = 0;

      inputs.forEach(input => {
        const value = parseFloat(input.value) || 0;
        sum += value;
      });

      document.getElementById('sumStatus').innerText = "Sum: " + sum.toFixed(2) + " should be 1";
      document.getElementById('generateGraphButton').disabled = (sum.toFixed(2) !== "1.00");
    }

    async function drawHistogram(empiricalCounts, probabilitiesInput, outcomeCount, sampleIntervals) {
      const canvas = document.getElementById("histogramCanvas");
      const ctx = canvas.getContext("2d");
      ctx.canvas.width = window.innerWidth;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const outcomeArray = Array.from({length: outcomeCount}, (_, i) => i + 1);
      const empiricalFrequencies = empiricalCounts.map(count => count / sampleIntervals);
      const theoreticalFrequencies = probabilitiesInput;

      const barWidth = (canvas.width - 100) / (2 * outcomeCount);
      ctx.font = "15px Arial";
      ctx.textAlign = "center";

      for (let i = 0; i < outcomeCount; i++) {
        const x = i * 2 * barWidth;

        ctx.fillStyle = "purple";
        const empiricalHeight = empiricalFrequencies[i] * (canvas.height - 55);
        ctx.fillRect(x + barWidth / 2, canvas.height - empiricalHeight - 30, barWidth / 2, empiricalHeight);

        ctx.fillStyle = "white";
        ctx.fillText(`${(empiricalFrequencies[i] * 100).toFixed(2)}%`, x + barWidth * 0.52, canvas.height - empiricalHeight - 40);

        ctx.fillStyle = "green";
        const theoreticalHeight = theoreticalFrequencies[i] * (canvas.height - 55);
        ctx.fillRect(x + barWidth, canvas.height - theoreticalHeight - 30, barWidth / 2, theoreticalHeight);

        ctx.fillStyle = "white";
        ctx.fillText(`${(theoreticalFrequencies[i] * 100).toFixed(2)}%`, x + barWidth * 1.48, canvas.height - theoreticalHeight - 40);

        ctx.fillText(`Outcome ${i + 1}`, x + barWidth, canvas.height - 10);
      }

      ctx.fillStyle = "purple";
      ctx.fillText("Empirical", canvas.width - 80, 20);
      ctx.fillStyle = "green";
      ctx.fillText("Theoretical", canvas.width - 80, 40);
      const empiricalMeanAndVariance = computeWeightedMeanAndVariance(outcomeArray, empiricalFrequencies);
      const empMean = empiricalMeanAndVariance.mean ? empiricalMeanAndVariance.mean.toFixed(3) : 0;
      const empVariance = empiricalMeanAndVariance.variance ? empiricalMeanAndVariance.variance.toFixed(3) : 0;
      const theoreticalMeanAndVariance = computeWeightedMeanAndVariance(outcomeArray, theoreticalFrequencies);
      const theMean = theoreticalMeanAndVariance.mean ? theoreticalMeanAndVariance.mean.toFixed(3) : 0;
      const theVariance = theoreticalMeanAndVariance.variance ? theoreticalMeanAndVariance.variance.toFixed(3) : 0;
      document.getElementById('histogramCanvas').style.display = 'block';
      document.getElementById('resultMean').innerHTML = `Empirical mean: ${empMean} vs Theorical mean: ${theMean}`;
      document.getElementById('resultVariance').innerHTML = `Empirical variance: ${empVariance} vs Theorical variance: ${theVariance}`;
      await new Promise(r => setTimeout(r, 1));
    }


    async function generateHistogram() {
      const inputs = document.querySelectorAll("#inputContainer input");
      const probabilitiesInput = Array.from(inputs).map(input => parseFloat(input.value) || 0);
      const outcomeCount = probabilitiesInput.length
      const sampleIntervals = parseInt(document.getElementById("sampleIntervals").value);

      const empiricalCounts = Array(outcomeCount).fill(0);

      for (let i = 0; i < sampleIntervals; i++) {
        const randomValue = Math.random()
        let cumulativeProbability = 0;

        for (let j = 0; j < outcomeCount; j++) {
          cumulativeProbability += probabilitiesInput[j];
          if (randomValue < cumulativeProbability) {
            empiricalCounts[j]++;

            break;
          }
        }
        if (i % 100 === 0 || i === sampleIntervals - 1) {
          await drawHistogram(empiricalCounts, probabilitiesInput, outcomeCount, sampleIntervals);
        }
      }
    }
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.1.2/es5/tex-mml-chtml.js">
  </script>

</body>

</html>